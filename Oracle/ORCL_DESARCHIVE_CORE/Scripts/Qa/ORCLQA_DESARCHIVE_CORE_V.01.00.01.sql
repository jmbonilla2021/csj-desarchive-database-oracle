/*
-------------------------------------------------------------------------------------------------------------------------------
-- OBJETIVO                  : Creacion de las tablas ESPECIALIDAD, JUZGADO, TIPO_PROCESO, ANIO
                               1. Creacion tablas
							   2. Llaves primarias
							   3. Llaves foraneas
							   4. Auticremento por tabla
                               para el modulo de Reparto.
-- PARÁMETROS DE ENTRADA     : NA
-- PARÁMETROS DE SALIDA      : NA   
-- OBJETOS QUE LO REFERENCIAN: NA
-- LIDER TÉCNICO             :              
-- FECHAHORA                 : 2021/11/10
-- REALIZADO POR             : INFORMATICA & TECNOLOGIA (GEDV - JAPC)
--	                           Este componente fue realizado bajo la metodología de desarrollo de Informática & Tecnología 
--                             y se encuentra Protegido por las leyes de derechos de autor.
-- FECHAHORA MODIFICACIÓN    : 
-- LIDER MODIFICACIÓN        : 
-- REALIZADO POR             : 
-- OBJETIVO MODIFICACIÓN     : 
-----------------------------------------------------------------------------------------------------------------------------
*/

PROMPT  ********* CREANDO TABLA JUZGADO
CREATE TABLE SCH_ORCLQA_DESARCHIVE_CORE.JUZGADO (
    ID_JUZGADO NUMBER(19) NOT NULL,
    CODIGO     NVARCHAR2(4) NOT NULL,
    NOMBRE     NVARCHAR2(30) NOT NULL,
    ES_ACTIVO  NUMBER(1) NOT NULL
);

CREATE UNIQUE INDEX SCH_ORCLQA_DESARCHIVE_CORE.IDX_CODIGO_JUZGADO ON
    SCH_ORCLQA_DESARCHIVE_CORE.JUZGADO (
        ID_JUZGADO
    ASC,
        CODIGO
    ASC );

ALTER TABLE SCH_ORCLQA_DESARCHIVE_CORE.JUZGADO ADD CONSTRAINT PK_JUZ PRIMARY KEY ( ID_JUZGADO );

CREATE SEQUENCE SCH_ORCLQA_DESARCHIVE_CORE.SEQ_JUZGADO START WITH 1 CACHE 100 ORDER;

CREATE OR REPLACE TRIGGER SCH_ORCLQA_DESARCHIVE_CORE.TRG_JUZGADO BEFORE
    INSERT ON SCH_ORCLQA_DESARCHIVE_CORE.JUZGADO
    FOR EACH ROW
    WHEN ( NEW.ID_JUZGADO IS NULL )
BEGIN
    :NEW.ID_JUZGADO := SCH_ORCLQA_DESARCHIVE_CORE.SEQ_JUZGADO.NEXTVAL;
END;
/

PROMPT  ********* CREANDO TABLA ESPECIALIDAD
CREATE TABLE SCH_ORCLQA_DESARCHIVE_CORE.ESPECIALIDAD (
    ID_ESPECIALIDAD NUMBER(19) NOT NULL,
    CODIGO          NUMBER(4) NOT NULL,
    NOMBRE          NVARCHAR2(30) NOT NULL,
    ES_ACTIVO       NUMBER(1) NOT NULL
);

CREATE UNIQUE INDEX SCH_ORCLQA_DESARCHIVE_CORE.IDX_CODIGO_ESPECIALIDAD ON
    SCH_ORCLQA_DESARCHIVE_CORE.ESPECIALIDAD (
        ID_ESPECIALIDAD
    ASC,
        CODIGO
    ASC );

ALTER TABLE SCH_ORCLQA_DESARCHIVE_CORE.ESPECIALIDAD ADD CONSTRAINT PK_ESP PRIMARY KEY ( ID_ESPECIALIDAD );

CREATE SEQUENCE SCH_ORCLQA_DESARCHIVE_CORE.SEQ_ESPECIALIDAD START WITH 1 CACHE 100 ORDER;

CREATE OR REPLACE TRIGGER SCH_ORCLQA_DESARCHIVE_CORE.TRG_ESPECIALIDAD BEFORE
    INSERT ON SCH_ORCLQA_DESARCHIVE_CORE.ESPECIALIDAD
    FOR EACH ROW
    WHEN ( NEW.ID_ESPECIALIDAD IS NULL )
BEGIN
    :NEW.ID_ESPECIALIDAD := SCH_ORCLQA_DESARCHIVE_CORE.SEQ_ESPECIALIDAD.NEXTVAL;
END;
/

PROMPT  ********* CREANDO TABLA TIPO_PROCESO
CREATE TABLE SCH_ORCLQA_DESARCHIVE_CORE.TIPO_PROCESO (
    ID_TIPO_PROCESO NUMBER(19) NOT NULL,
    CODIGO          NVARCHAR2(4) NOT NULL,
    NOMBRE          NVARCHAR2(30) NOT NULL,
    ES_ACTIVO       NUMBER(1) NOT NULL
);

CREATE UNIQUE INDEX SCH_ORCLQA_DESARCHIVE_CORE.IDX_CODIGO_TIPO_PROC ON
    SCH_ORCLQA_DESARCHIVE_CORE.TIPO_PROCESO (
        ID_TIPO_PROCESO
    ASC,
        CODIGO
    ASC );

ALTER TABLE SCH_ORCLQA_DESARCHIVE_CORE.TIPO_PROCESO ADD CONSTRAINT PK_TPP PRIMARY KEY ( ID_TIPO_PROCESO );

CREATE SEQUENCE SCH_ORCLQA_DESARCHIVE_CORE.SEQ_TIPO_PROCESO START WITH 1 CACHE 100 ORDER;

CREATE OR REPLACE TRIGGER SCH_ORCLQA_DESARCHIVE_CORE.TRG_TIPO_PROCESO BEFORE
    INSERT ON SCH_ORCLQA_DESARCHIVE_CORE.TIPO_PROCESO
    FOR EACH ROW
    WHEN ( NEW.ID_TIPO_PROCESO IS NULL )
BEGIN
    :NEW.ID_TIPO_PROCESO := SCH_ORCLQA_DESARCHIVE_CORE.SEQ_TIPO_PROCESO.NEXTVAL;
END;
/

PROMPT  ********* CREANDO TABLA ANIO
CREATE TABLE SCH_ORCLQA_DESARCHIVE_CORE.ANIO (
    ID_ANIO   NUMBER(19) NOT NULL,
    CODIGO    NUMBER(4) NOT NULL,
    ES_ACTIVO NUMBER(1) NOT NULL
);

CREATE UNIQUE INDEX SCH_ORCLQA_DESARCHIVE_CORE.IDX_CODIGO_ANIO ON
    SCH_ORCLQA_DESARCHIVE_CORE.ANIO (
        ID_ANIO
    ASC,
        CODIGO
    ASC );

ALTER TABLE SCH_ORCLQA_DESARCHIVE_CORE.ANIO ADD CONSTRAINT PK_ANI PRIMARY KEY ( ID_ANIO );

CREATE SEQUENCE SCH_ORCLQA_DESARCHIVE_CORE.SEQ_ANIO START WITH 1 CACHE 100 ORDER;

CREATE OR REPLACE TRIGGER SCH_ORCLQA_DESARCHIVE_CORE.TRG_ANIO BEFORE
    INSERT ON SCH_ORCLQA_DESARCHIVE_CORE.ANIO
    FOR EACH ROW
    WHEN ( NEW.ID_ANIO IS NULL )
BEGIN
    :NEW.ID_ANIO := SCH_ORCLQA_DESARCHIVE_CORE.SEQ_ANIO.NEXTVAL;
END;
/

PROMPT  ********* CREANDO TABLA TIPO_SUJETO_PROCESAL
CREATE TABLE SCH_ORCLQA_DESARCHIVE_CORE.TIPO_SUJETO_PROCESAL (
    ID_TIPO_SUJETO_PROCESAL NUMBER(19) NOT NULL,
    CODIGO                  NVARCHAR2(1000) NOT NULL,
    NOMBRE                  NVARCHAR2(1000) NOT NULL,
    ES_ACTIVO               NUMBER(1) NOT NULL
);

CREATE UNIQUE INDEX SCH_ORCLQA_DESARCHIVE_CORE.IDX_CODIGO_TP_SPROCESAL ON
    SCH_ORCLQA_DESARCHIVE_CORE.TIPO_SUJETO_PROCESAL (
        CODIGO
    ASC );

ALTER TABLE SCH_ORCLQA_DESARCHIVE_CORE.TIPO_SUJETO_PROCESAL ADD CONSTRAINT TIPO_SUJETO_PROCESAL_PK PRIMARY KEY ( ID_TIPO_SUJETO_PROCESAL );

CREATE SEQUENCE SCH_ORCLQA_DESARCHIVE_CORE.SEQ_TIPO_SUJETO_PROCESAL START WITH 1 CACHE 100 ORDER;

CREATE OR REPLACE TRIGGER SCH_ORCLQA_DESARCHIVE_CORE.TRG_TIPO_SUJETO_PROCESAL BEFORE
    INSERT ON SCH_ORCLQA_DESARCHIVE_CORE.TIPO_SUJETO_PROCESAL
    FOR EACH ROW
    WHEN ( NEW.ID_TIPO_SUJETO_PROCESAL IS NULL )
BEGIN
    :NEW.ID_TIPO_SUJETO_PROCESAL := SCH_ORCLQA_DESARCHIVE_CORE.SEQ_TIPO_SUJETO_PROCESAL.NEXTVAL;
END;
/



--- GENERACION DE PERMISOS
DECLARE
  V_ROL  VARCHAR2(4000);
  CURSOR C_PERMISOS
  IS 
    SELECT 'GRANT SELECT, INSERT, UPDATE, DELETE ON SCH_ORCLQA_DESARCHIVE_CORE.'||TABLE_NAME||' TO ' AS SENTENCIA
    FROM   USER_TABLES;
  R_PER C_PERMISOS%ROWTYPE;
BEGIN
  V_ROL := 'ROLQA_DESARCHIVE_CORE';
  
  OPEN C_PERMISOS;
  LOOP
    FETCH C_PERMISOS INTO R_PER;
    EXIT WHEN C_PERMISOS%NOTFOUND;
      EXECUTE IMMEDIATE R_PER.SENTENCIA||V_ROL;
  END LOOP;
  CLOSE C_PERMISOS;
EXCEPTION
  WHEN OTHERS THEN
    IF C_PERMISOS%ISOPEN THEN CLOSE C_PERMISOS; END IF;
END;